% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class006-bids_tabular.R
\name{bids_tabular}
\alias{bids_tabular}
\alias{bids_tabular_column_descriptor}
\alias{bids_tabular_meta_sidecar}
\alias{as_bids_tabular}
\title{Class definitions and utilities for 'BIDS' tabular}
\usage{
bids_tabular_column_descriptor(..., .list = list())

bids_tabular_meta_sidecar(columns = list())

bids_tabular(content, meta = NULL)

as_bids_tabular(x, ...)
}
\arguments{
\item{..., .list}{for \code{bids_tabular_column_descriptor}, this is
a list of key-value properties; for \code{as_bids_tabular}, this is passed
to \code{bids_tabular_meta_sidecar}}

\item{columns}{a named list, where each key correspond to a table column
name, and each item is a named list of descriptors, or a
\code{bids_tabular_column_descriptor} instance}

\item{content}{a data frame or table with column names non-blanks and
possibly all in snake-cases (see specification); \code{bidsr} does not check
on the column names for compatibility concerns. However users should respect
the specification and use the recommended conventions}

\item{meta}{instance of \code{bids_tabular_meta_sidecar}, a class containing
a list of descriptors for each column (see argument \code{columns})}

\item{x}{R object that can be converted (e.g. list, table), or a path
to a tabular file.}
}
\value{
A component in \code{bids_tabular}.
}
\description{
Official specification link:
\url{https://bids-specification.readthedocs.io/en/stable/common-principles.html#tabular-files}
}
\examples{



# convert a data table into BIDS tabular
table <- data.frame(
  a = c(1, 2, 3, NA, NA, 6, 7, 8, 9, 10),
  b = sample(c('a', 'b'), size = 10, replace = TRUE)
)

# basic
as_bids_tabular(table)

# add descriptors
tabular <- as_bids_tabular(
  table,
  a = list(LongName = "An integer"),
  b = list("Levels" = list('a' = "Abnormal", 'b' = "Bipolar"))
)
tabular


# query data
is.data.frame(tabular$content)
tabular$content$a

# query meta
tabular$meta$columns$a

# save to tsv
tsv <- tempfile(fileext = ".tsv")
paths <- tabular$save(tsv)
print(paths)

# use base R to read
read.table(tsv, header = TRUE, na.strings = "n/a")

# get sidecar
cat(readLines(paths$sidecar_path), sep = "\n")

unlink(tsv)
unlink(paths$sidecar_path)



}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/class020-bids_filename_registry.R
\name{bids_entity_file_registry}
\alias{bids_entity_file_registry}
\alias{parse_bids_file_entity_registry}
\alias{register_bids_file_entiries}
\alias{bids_entity_file_registry_get}
\alias{bids_entity_file_registry_list}
\title{Generate 'BIDS' entity file-name class}
\usage{
parse_bids_file_entity_registry(
  definition_table,
  entity_table,
  data_type_table = NULL,
  suffix_table = NULL
)

register_bids_file_entiries(
  definition_table,
  entity_table,
  data_type_table = NULL,
  suffix_table = NULL,
  overwrite = NA
)

bids_entity_file_registry_get(identifier, ifnotfound = NULL, overwrite = NA)

bids_entity_file_registry_list(data_types = NA)
}
\arguments{
\item{definition_table}{data table or a path to a 'CSV' file where 'BIDS'
entities are defined for each combination of data type and suffix. The
columns must start with \code{'DataType'} and \code{'Suffix'}, followed by
data entities; See 'Examples'.}

\item{entity_table}{table of two columns: \code{'Name'} (entity keys) and
\code{'Type'}) entity data type; See 'Examples'.}

\item{data_type_table, suffix_table}{used to generate descriptions; optional}

\item{overwrite}{whether to overwrite existing registry if two definitions
with the same identifier coincide; default is \code{NA}, assuming two
definitions are identical, and will not overwrite existing ones; set to
\code{TRUE} to always force registering the new definitions; set to
\code{FALSE} and the script will error out if existing definitions have been
already registered.}

\item{identifier}{file registry identifier, automatically derived from
data type and suffix; format is \code{'datatype/suffix'}}

\item{ifnotfound}{default to return is definition is not found}

\item{data_types}{constraint returns to be under certain data types; default
is \code{NA} (return the entire registry)}
}
\value{
For \code{parse_bids_file_entity_registry}, returns a list of
entity identifiers and definitions; \code{register_bids_file_entiries}
registers these definitions to a registry, by identifiers, and returns the
number of total definitions registered.
}
\description{
Rule-based 'BIDS' entity file names, see class generator at
\code{\link{new_bids_entity_file_class}}; for entity tables; see
\url{https://bids-specification.readthedocs.io/en/stable/appendices/entity-table.html}
}
\examples{

# ---- Example tables --------------------------------------------

definition_table <- system.file(
  "definitions", "MagneticResonanceImaging.csv",
  package = "bidsr")

print(head(read.csv(definition_table)))


entity_table <- system.file(
  "definitions", "MagneticResonanceImagingEntity.csv",
  package = "bidsr")

print(head(read.csv(entity_table)))


data_type_table <- system.file(
  "definitions", "glossary", "DataType.csv", package = "bidsr")

print(head(read.csv(data_type_table)))


suffix_table <- system.file(
  "definitions", "glossary", "Suffix.csv", package = "bidsr")

print(head(read.csv(suffix_table)))

# ---- Parse ------------------------------------------------
parsed <- parse_bids_file_entity_registry(
  definition_table = definition_table,
  entity_table = entity_table,
  data_type_table = data_type_table,
  suffix_table = suffix_table
)

parsed[[1]]

# ---- Register to registry for querying --------------------
register_bids_file_entiries(
  definition_table = definition_table,
  entity_table = entity_table,
  data_type_table = data_type_table,
  suffix_table = suffix_table
)

# example using definition
t1_definition <- bids_entity_file_registry_get("anat/t1w")

filename <- t1_definition(
  parent_directory = "anat",
  sub = "001",
  ses = "001",
  task = "001",
  acq = "ecog",
  .extension = "nii.gz"
)

# use formatting
format(filename)

file.path("BIDS/directory/to", filename)

# with descriptions
print(filename, details = TRUE)

# get subject value
filename$entities$sub$value


}
